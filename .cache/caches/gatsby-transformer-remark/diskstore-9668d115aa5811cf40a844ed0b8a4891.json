{"expireTime":9007200855019203000,"key":"transformer-remark-markdown-ast-7d14d58dec903924deb8a8b731680919-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-/aloptrbl","val":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"What is Functional Programming?","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":35,"offset":35},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":35,"offset":35},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Functional programming is a declarative pure functions\nand a programming paradigm in which the function treats as mathematical function style. It also use conditional expressions and recursion to perform computation.","position":{"start":{"line":4,"column":3,"offset":39},"end":{"line":5,"column":164,"offset":257},"indent":[3]}}],"position":{"start":{"line":4,"column":3,"offset":39},"end":{"line":5,"column":164,"offset":257},"indent":[3]}}],"position":{"start":{"line":4,"column":1,"offset":37},"end":{"line":5,"column":164,"offset":257},"indent":[1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Concepts of functional programming:","position":{"start":{"line":7,"column":6,"offset":264},"end":{"line":7,"column":41,"offset":299},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":259},"end":{"line":7,"column":41,"offset":299},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Pure functions","position":{"start":{"line":9,"column":3,"offset":303},"end":{"line":9,"column":17,"offset":317},"indent":[]}}],"position":{"start":{"line":9,"column":3,"offset":303},"end":{"line":9,"column":17,"offset":317},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":301},"end":{"line":9,"column":17,"offset":317},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Immutable data","position":{"start":{"line":10,"column":3,"offset":320},"end":{"line":10,"column":17,"offset":334},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":320},"end":{"line":10,"column":17,"offset":334},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":318},"end":{"line":10,"column":17,"offset":334},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Decompose the problem into functions","position":{"start":{"line":11,"column":3,"offset":337},"end":{"line":11,"column":39,"offset":373},"indent":[]}}],"position":{"start":{"line":11,"column":3,"offset":337},"end":{"line":11,"column":39,"offset":373},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":335},"end":{"line":11,"column":39,"offset":373},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"No side effects","position":{"start":{"line":12,"column":3,"offset":376},"end":{"line":12,"column":18,"offset":391},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":376},"end":{"line":12,"column":18,"offset":391},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":374},"end":{"line":12,"column":18,"offset":391},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"No mutating state","position":{"start":{"line":13,"column":3,"offset":394},"end":{"line":13,"column":20,"offset":411},"indent":[]}}],"position":{"start":{"line":13,"column":3,"offset":394},"end":{"line":13,"column":20,"offset":411},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":392},"end":{"line":13,"column":20,"offset":411},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":301},"end":{"line":13,"column":20,"offset":411},"indent":[1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Impure Function vs Pure Function","position":{"start":{"line":15,"column":6,"offset":418},"end":{"line":15,"column":38,"offset":450},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":413},"end":{"line":15,"column":38,"offset":450},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//Impure Function</span>\n<span class=\"token keyword\">let</span> number <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">squareNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  number <span class=\"token operator\">=</span> number <span class=\"token operator\">*</span> number\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> number\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Pure Function</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">squareNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  number <span class=\"token operator\">=</span> number <span class=\"token operator\">*</span> number\n  <span class=\"token keyword\">return</span> number\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":17,"column":1,"offset":452},"end":{"line":31,"column":4,"offset":681},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In functional programming language, function are values just like strings or numbers, function can be assigned to variable or pass into other functions higher-order.","position":{"start":{"line":33,"column":1,"offset":683},"end":{"line":33,"column":166,"offset":848},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":683},"end":{"line":33,"column":166,"offset":848},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Pass into variable ü§ù","position":{"start":{"line":35,"column":1,"offset":850},"end":{"line":35,"column":22,"offset":871},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":850},"end":{"line":35,"column":22,"offset":871},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">tripe</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">triple</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">tripe</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":37,"column":1,"offset":873},"end":{"line":42,"column":4,"offset":955},"indent":[1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"HIGHER ORDER FUNCTION","position":{"start":{"line":44,"column":5,"offset":961},"end":{"line":44,"column":26,"offset":982},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":957},"end":{"line":44,"column":26,"offset":982},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A function that take other function as argument.\nTwo level of function (composition)","position":{"start":{"line":46,"column":1,"offset":984},"end":{"line":47,"column":36,"offset":1068},"indent":[1]}}],"position":{"start":{"line":46,"column":1,"offset":984},"end":{"line":47,"column":36,"offset":1068},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Function inside another function allow us to compose a lot of small function into bigger function.","position":{"start":{"line":49,"column":1,"offset":1070},"end":{"line":49,"column":99,"offset":1168},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":1070},"end":{"line":49,"column":99,"offset":1168},"indent":[]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Example #1","position":{"start":{"line":51,"column":8,"offset":1177},"end":{"line":51,"column":18,"offset":1187},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":1170},"end":{"line":51,"column":18,"offset":1187},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> animals <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n<span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'Fluffykins'</span><span class=\"token punctuation\">,</span> species<span class=\"token operator\">:</span> <span class=\"token string\">'rabbit'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'Caro'</span><span class=\"token punctuation\">,</span> species<span class=\"token operator\">:</span> <span class=\"token string\">'dog'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'Hamilton'</span><span class=\"token punctuation\">,</span> species<span class=\"token operator\">:</span> <span class=\"token string\">'dog'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'Harold'</span><span class=\"token punctuation\">,</span> species<span class=\"token operator\">:</span> <span class=\"token string\">'fish'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'Ursula'</span><span class=\"token punctuation\">,</span> species<span class=\"token operator\">:</span> <span class=\"token string\">'cat'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'Jimmy'</span><span class=\"token punctuation\">,</span> species<span class=\"token operator\">:</span> <span class=\"token string\">'fish'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">//filter animal</span>\n<span class=\"token keyword\">var</span> dog <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token function\">For</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> animals<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token function\">If</span> <span class=\"token punctuation\">(</span>animals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>species <span class=\"token operator\">===</span> <span class=\"token string\">'dog'</span><span class=\"token punctuation\">)</span>\ndog<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>animals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//filter animal with filter function less code</span>\n<span class=\"token keyword\">var</span> dog <span class=\"token operator\">-</span> animals<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">animal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//return new filter array</span>\nReturn animal<span class=\"token punctuation\">.</span>species <span class=\"token operator\">===</span> <span class=\"token string\">'dog'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//pass into variable</span>\nVar <span class=\"token function-variable function\">isDog</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">animal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nReturn animal<span class=\"token punctuation\">.</span>species <span class=\"token operator\">===</span> <span class=\"token string\">'dogs'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//higher order function filter</span>\nVar dogs <span class=\"token operator\">=</span> animals<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isDog<span class=\"token punctuation\">)</span>\nVar otherAnimals <span class=\"token operator\">=</span> animals<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>isDog<span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":53,"column":1,"offset":1189},"end":{"line":85,"column":4,"offset":1905},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"Example #2","position":{"start":{"line":87,"column":7,"offset":1913},"end":{"line":87,"column":17,"offset":1923},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":1907},"end":{"line":87,"column":17,"offset":1923},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sing</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lalala\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">meow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"meow\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">sing</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"moew meow\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":89,"column":1,"offset":1925},"end":{"line":106,"column":4,"offset":2143},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"Example #3","position":{"start":{"line":108,"column":7,"offset":2151},"end":{"line":108,"column":17,"offset":2161},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":2145},"end":{"line":108,"column":17,"offset":2161},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">factor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> factor<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> doubler <span class=\"token operator\">=</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> tripler <span class=\"token operator\">=</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">doubler</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":109,"column":1,"offset":2162},"end":{"line":118,"column":4,"offset":2315},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Arrow Function","position":{"start":{"line":120,"column":5,"offset":2321},"end":{"line":120,"column":19,"offset":2335},"indent":[]}}],"position":{"start":{"line":120,"column":1,"offset":2317},"end":{"line":120,"column":19,"offset":2335},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//pure function</span>\nFunction <span class=\"token function\">sing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lalala'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//arrow function</span>\nFunction <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">factor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nReturn <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> factor \n<span class=\"token punctuation\">}</span>\n\nLet doubler <span class=\"token operator\">=</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nLet tripler <span class=\"token operator\">=</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":121,"column":1,"offset":2336},"end":{"line":134,"column":4,"offset":2539},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":136,"column":1,"offset":2541}}}}